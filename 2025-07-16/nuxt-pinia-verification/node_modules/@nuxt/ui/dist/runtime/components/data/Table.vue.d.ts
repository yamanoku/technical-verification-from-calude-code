import type { PropType, AriaAttributes } from 'vue';
import type { TableRow, TableColumn, Strategy, Button, ProgressColor, ProgressAnimation, DeepPartial, Expanded } from '../../types/index.js';
declare const config: {
    wrapper: string;
    base: string;
    divide: string;
    thead: string;
    tbody: string;
    caption: string;
    tr: {
        base: string;
        selected: string;
        expanded: string;
        active: string;
    };
    th: {
        base: string;
        padding: string;
        color: string;
        font: string;
        size: string;
    };
    td: {
        base: string;
        padding: string;
        color: string;
        font: string;
        size: string;
    };
    checkbox: {
        padding: string;
    };
    loadingState: {
        wrapper: string;
        label: string;
        icon: string;
    };
    emptyState: {
        wrapper: string;
        label: string;
        icon: string;
    };
    expand: {
        icon: string;
    };
    progress: {
        wrapper: string;
    };
    default: {
        sortAscIcon: string;
        sortDescIcon: string;
        sortButton: {
            icon: string;
            trailing: boolean;
            square: boolean;
            color: import("../../types/button.js").ButtonColor;
            variant: import("../../types/button.js").ButtonVariant;
            class: string;
        };
        expandButton: {
            icon: string;
            color: import("../../types/button.js").ButtonColor;
            variant: import("../../types/button.js").ButtonVariant;
            size: import("../../types/button.js").ButtonSize;
            class: string;
        };
        checkbox: {
            color: import("../../types/checkbox.js").CheckboxColor;
        };
        progress: {
            color: ProgressColor;
            animation: ProgressAnimation;
        };
        loadingState: {
            icon: string;
            label: string;
        };
        emptyState: {
            icon: string;
            label: string;
        };
    };
};
declare function defaultComparator<T>(a: T, z: T): boolean;
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    modelValue: {
        type: ArrayConstructor;
        default: any;
    };
    by: {
        type: (StringConstructor | FunctionConstructor)[];
        default: () => typeof defaultComparator;
    };
    rows: {
        type: PropType<TableRow[]>;
        default: () => any[];
    };
    columns: {
        type: PropType<TableColumn[]>;
        default: any;
    };
    columnAttribute: {
        type: StringConstructor;
        default: string;
    };
    sort: {
        type: PropType<{
            column: string;
            direction: "asc" | "desc";
        }>;
        default: () => {};
    };
    sortMode: {
        type: PropType<"manual" | "auto">;
        default: string;
    };
    sortButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    sortAscIcon: {
        type: StringConstructor;
        default: () => string;
    };
    sortDescIcon: {
        type: StringConstructor;
        default: () => string;
    };
    expandButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    expand: {
        type: PropType<Expanded<TableRow>>;
        default: () => any;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingState: {
        type: PropType<{
            icon: string;
            label: string;
        } | null>;
        default: () => {
            icon: string;
            label: string;
        };
    };
    emptyState: {
        type: PropType<{
            icon: string;
            label: string;
        }>;
        default: () => {
            icon: string;
            label: string;
        };
    };
    caption: {
        type: StringConstructor;
        default: any;
    };
    progress: {
        type: PropType<{
            color: ProgressColor;
            animation: ProgressAnimation;
        }>;
        default: () => {
            color: ProgressColor;
            animation: ProgressAnimation;
        };
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<DeepPartial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
    multipleExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    singleSelect: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    ui: import("vue").ComputedRef<{
        wrapper: string;
        base: string;
        divide: string;
        thead: string;
        tbody: string;
        caption: string;
        tr: {
            base: string;
            selected: string;
            expanded: string;
            active: string;
        };
        th: {
            base: string;
            padding: string;
            color: string;
            font: string;
            size: string;
        };
        td: {
            base: string;
            padding: string;
            color: string;
            font: string;
            size: string;
        };
        checkbox: {
            padding: string;
        };
        loadingState: {
            wrapper: string;
            label: string;
            icon: string;
        };
        emptyState: {
            wrapper: string;
            label: string;
            icon: string;
        };
        expand: {
            icon: string;
        };
        progress: {
            wrapper: string;
        };
        default: {
            sortAscIcon: string;
            sortDescIcon: string;
            sortButton: {
                icon: string;
                trailing: boolean;
                square: boolean;
                color: import("../../types/button.js").ButtonColor;
                variant: import("../../types/button.js").ButtonVariant;
                class: string;
            };
            expandButton: {
                icon: string;
                color: import("../../types/button.js").ButtonColor;
                variant: import("../../types/button.js").ButtonVariant;
                size: import("../../types/button.js").ButtonSize;
                class: string;
            };
            checkbox: {
                color: import("../../types/checkbox.js").CheckboxColor;
            };
            progress: {
                color: ProgressColor;
                animation: ProgressAnimation;
            };
            loadingState: {
                icon: string;
                label: string;
            };
            emptyState: {
                icon: string;
                label: string;
            };
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    sort: import("vue").Ref<{
        column: string;
        direction: "asc" | "desc";
    }, {
        column: string;
        direction: "asc" | "desc";
    }>;
    columns: import("vue").ComputedRef<TableColumn[]>;
    rows: import("vue").ComputedRef<TableRow[]>;
    selected: import("vue").WritableComputedRef<unknown[], unknown[]>;
    indeterminate: import("vue").ComputedRef<boolean>;
    emptyState: import("vue").ComputedRef<{
        icon: string;
        label: string;
    }>;
    loadingState: import("vue").ComputedRef<{
        icon: string;
        label: string;
    }>;
    isAllRowChecked: import("vue").ComputedRef<boolean>;
    onChangeCheckbox: (checked: boolean, row: TableRow) => void;
    isSelected: (row: TableRow) => boolean;
    onSort: (column: {
        key: string;
        direction?: "asc" | "desc";
    }) => void;
    onSelect: (row: TableRow) => void;
    onContextmenu: (event: any, row: any) => void;
    onChange: (checked: boolean) => void;
    getRowData: (row: TableRow, rowKey: string | string[], defaultValue?: any) => any;
    toggleOpened: (row: TableRow) => void;
    getAriaSort: (column: TableColumn) => AriaAttributes["aria-sort"];
    isExpanded: (row: TableRow) => boolean;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:sort" | "update:expand" | "select:all")[], "update:modelValue" | "update:sort" | "update:expand" | "select:all", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: ArrayConstructor;
        default: any;
    };
    by: {
        type: (StringConstructor | FunctionConstructor)[];
        default: () => typeof defaultComparator;
    };
    rows: {
        type: PropType<TableRow[]>;
        default: () => any[];
    };
    columns: {
        type: PropType<TableColumn[]>;
        default: any;
    };
    columnAttribute: {
        type: StringConstructor;
        default: string;
    };
    sort: {
        type: PropType<{
            column: string;
            direction: "asc" | "desc";
        }>;
        default: () => {};
    };
    sortMode: {
        type: PropType<"manual" | "auto">;
        default: string;
    };
    sortButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    sortAscIcon: {
        type: StringConstructor;
        default: () => string;
    };
    sortDescIcon: {
        type: StringConstructor;
        default: () => string;
    };
    expandButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    expand: {
        type: PropType<Expanded<TableRow>>;
        default: () => any;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingState: {
        type: PropType<{
            icon: string;
            label: string;
        } | null>;
        default: () => {
            icon: string;
            label: string;
        };
    };
    emptyState: {
        type: PropType<{
            icon: string;
            label: string;
        }>;
        default: () => {
            icon: string;
            label: string;
        };
    };
    caption: {
        type: StringConstructor;
        default: any;
    };
    progress: {
        type: PropType<{
            color: ProgressColor;
            animation: ProgressAnimation;
        }>;
        default: () => {
            color: ProgressColor;
            animation: ProgressAnimation;
        };
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<DeepPartial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
    multipleExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    singleSelect: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:sort"?: (...args: any[]) => any;
    "onUpdate:expand"?: (...args: any[]) => any;
    "onSelect:all"?: (...args: any[]) => any;
}>, {
    sort: {
        column: string;
        direction: "asc" | "desc";
    };
    ui: {
        wrapper?: string;
        base?: string;
        divide?: string;
        thead?: string;
        tbody?: string;
        caption?: string;
        tr?: DeepPartial<{
            base: string;
            selected: string;
            expanded: string;
            active: string;
        }, any>;
        th?: DeepPartial<{
            base: string;
            padding: string;
            color: string;
            font: string;
            size: string;
        }, any>;
        td?: DeepPartial<{
            base: string;
            padding: string;
            color: string;
            font: string;
            size: string;
        }, any>;
        checkbox?: DeepPartial<{
            padding: string;
        }, any>;
        loadingState?: DeepPartial<{
            wrapper: string;
            label: string;
            icon: string;
        }, any>;
        emptyState?: DeepPartial<{
            wrapper: string;
            label: string;
            icon: string;
        }, any>;
        expand?: DeepPartial<{
            icon: string;
        }, any>;
        progress?: DeepPartial<{
            wrapper: string;
        }, any>;
        default?: DeepPartial<{
            sortAscIcon: string;
            sortDescIcon: string;
            sortButton: {
                icon: string;
                trailing: boolean;
                square: boolean;
                color: import("../../types/button.js").ButtonColor;
                variant: import("../../types/button.js").ButtonVariant;
                class: string;
            };
            expandButton: {
                icon: string;
                color: import("../../types/button.js").ButtonColor;
                variant: import("../../types/button.js").ButtonVariant;
                size: import("../../types/button.js").ButtonSize;
                class: string;
            };
            checkbox: {
                color: import("../../types/checkbox.js").CheckboxColor;
            };
            progress: {
                color: ProgressColor;
                animation: ProgressAnimation;
            };
            loadingState: {
                icon: string;
                label: string;
            };
            emptyState: {
                icon: string;
                label: string;
            };
        }, any>;
    } & {
        [key: string]: any;
    } & {
        strategy?: Strategy;
    };
    caption: string;
    columns: TableColumn[];
    progress: {
        color: ProgressColor;
        animation: ProgressAnimation;
    };
    class: any;
    modelValue: unknown[];
    loading: boolean;
    loadingState: {
        icon: string;
        label: string;
    };
    emptyState: {
        icon: string;
        label: string;
    };
    expand: Expanded<TableRow>;
    by: string | Function;
    rows: TableRow[];
    columnAttribute: string;
    sortMode: "auto" | "manual";
    sortButton: Button;
    sortAscIcon: string;
    sortDescIcon: string;
    expandButton: Button;
    multipleExpand: boolean;
    singleSelect: boolean;
}, {}, {
    UIcon: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            required: true;
        };
        mode: {
            type: PropType<"svg" | "css">;
            required: false;
            default: any;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: any;
        };
        customize: {
            type: FunctionConstructor;
            required: false;
            default: any;
        };
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
            required: true;
        };
        mode: {
            type: PropType<"svg" | "css">;
            required: false;
            default: any;
        };
        size: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: any;
        };
        customize: {
            type: FunctionConstructor;
            required: false;
            default: any;
        };
    }>> & Readonly<{}>, {
        mode: "svg" | "css";
        size: string | number;
        customize: Function;
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    UButton: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: any;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        padded: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<import("../../types/button.js").ButtonSize>;
            default: () => string;
            validator(value: string): boolean;
        };
        color: {
            type: PropType<import("../../types/button.js").ButtonColor>;
            default: () => string;
            validator(value: string): boolean;
        };
        variant: {
            type: PropType<import("../../types/button.js").ButtonVariant>;
            default: () => string;
            validator(value: string): boolean;
        };
        icon: {
            type: StringConstructor;
            default: any;
        };
        loadingIcon: {
            type: StringConstructor;
            default: () => string;
        };
        leadingIcon: {
            type: StringConstructor;
            default: any;
        };
        trailingIcon: {
            type: StringConstructor;
            default: any;
        };
        trailing: {
            type: BooleanConstructor;
            default: boolean;
        };
        leading: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        truncate: {
            type: BooleanConstructor;
            default: boolean;
        };
        class: {
            type: PropType<any>;
            default: () => "";
        };
        ui: {
            type: PropType<DeepPartial<{
                base: string;
                font: string;
                rounded: string;
                truncate: string;
                block: string;
                inline: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                gap: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                padding: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                square: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                color: {
                    white: {
                        solid: string;
                        ghost: string;
                    };
                    gray: {
                        solid: string;
                        ghost: string;
                        link: string;
                    };
                    black: {
                        solid: string;
                        link: string;
                    };
                };
                variant: {
                    solid: string;
                    outline: string;
                    soft: string;
                    ghost: string;
                    link: string;
                };
                icon: {
                    base: string;
                    loading: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                    };
                };
                default: {
                    size: string;
                    variant: string;
                    color: string;
                    loadingIcon: string;
                };
            }> & {
                strategy?: Strategy;
            }>;
            default: () => {};
        };
        to: {
            readonly type: PropType<import("vue-router").RouteLocationRaw>;
            readonly default: any;
            readonly required: false;
        };
        href: {
            readonly type: PropType<import("vue-router").RouteLocationRaw>;
            readonly default: any;
            readonly required: false;
        };
        target: {
            readonly type: PropType<import("#app").NuxtLinkProps["target"]>;
            readonly default: any;
            readonly required: false;
        };
        rel: {
            readonly type: PropType<any>;
            readonly default: any;
            readonly required: false;
        };
        noRel: {
            readonly type: PropType<import("#app").NuxtLinkProps["noRel"]>;
            readonly default: any;
            readonly required: false;
        };
        prefetch: {
            readonly type: PropType<import("#app").NuxtLinkProps["prefetch"]>;
            readonly default: any;
            readonly required: false;
        };
        noPrefetch: {
            readonly type: PropType<import("#app").NuxtLinkProps["noPrefetch"]>;
            readonly default: any;
            readonly required: false;
        };
        activeClass: {
            readonly type: PropType<import("#app").NuxtLinkProps["activeClass"]>;
            readonly default: any;
            readonly required: false;
        };
        exactActiveClass: {
            readonly type: PropType<import("#app").NuxtLinkProps["exactActiveClass"]>;
            readonly default: any;
            readonly required: false;
        };
        prefetchedClass: {
            readonly type: PropType<import("#app").NuxtLinkProps["prefetchedClass"]>;
            readonly default: any;
            readonly required: false;
        };
        replace: {
            readonly type: PropType<import("#app").NuxtLinkProps["replace"]>;
            readonly default: any;
            readonly required: false;
        };
        ariaCurrentValue: {
            readonly type: PropType<import("#app").NuxtLinkProps["ariaCurrentValue"]>;
            readonly default: any;
            readonly required: false;
        };
        external: {
            readonly type: PropType<import("#app").NuxtLinkProps["external"]>;
            readonly default: any;
            readonly required: false;
        };
    }>, {
        ui: import("vue").ComputedRef<{
            base: string;
            font: string;
            rounded: string;
            truncate: string;
            block: string;
            inline: string;
            size: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
            gap: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
            padding: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
            square: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
            color: {
                white: {
                    solid: string;
                    ghost: string;
                };
                gray: {
                    solid: string;
                    ghost: string;
                    link: string;
                };
                black: {
                    solid: string;
                    link: string;
                };
            };
            variant: {
                solid: string;
                outline: string;
                soft: string;
                ghost: string;
                link: string;
            };
            icon: {
                base: string;
                loading: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
            };
            default: {
                size: string;
                variant: string;
                color: string;
                loadingIcon: string;
            };
        }>;
        attrs: import("vue").ComputedRef<Pick<{
            [x: string]: unknown;
        }, string>>;
        isLeading: import("vue").ComputedRef<string | true>;
        isTrailing: import("vue").ComputedRef<string | true>;
        isSquare: import("vue").ComputedRef<boolean>;
        buttonClass: import("vue").ComputedRef<string>;
        leadingIconName: import("vue").ComputedRef<string>;
        trailingIconName: import("vue").ComputedRef<string>;
        leadingIconClass: import("vue").ComputedRef<string>;
        trailingIconClass: import("vue").ComputedRef<string>;
        linkProps: import("vue").ComputedRef<{}>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: any;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        padded: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: PropType<import("../../types/button.js").ButtonSize>;
            default: () => string;
            validator(value: string): boolean;
        };
        color: {
            type: PropType<import("../../types/button.js").ButtonColor>;
            default: () => string;
            validator(value: string): boolean;
        };
        variant: {
            type: PropType<import("../../types/button.js").ButtonVariant>;
            default: () => string;
            validator(value: string): boolean;
        };
        icon: {
            type: StringConstructor;
            default: any;
        };
        loadingIcon: {
            type: StringConstructor;
            default: () => string;
        };
        leadingIcon: {
            type: StringConstructor;
            default: any;
        };
        trailingIcon: {
            type: StringConstructor;
            default: any;
        };
        trailing: {
            type: BooleanConstructor;
            default: boolean;
        };
        leading: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        truncate: {
            type: BooleanConstructor;
            default: boolean;
        };
        class: {
            type: PropType<any>;
            default: () => "";
        };
        ui: {
            type: PropType<DeepPartial<{
                base: string;
                font: string;
                rounded: string;
                truncate: string;
                block: string;
                inline: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                gap: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                padding: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                square: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                color: {
                    white: {
                        solid: string;
                        ghost: string;
                    };
                    gray: {
                        solid: string;
                        ghost: string;
                        link: string;
                    };
                    black: {
                        solid: string;
                        link: string;
                    };
                };
                variant: {
                    solid: string;
                    outline: string;
                    soft: string;
                    ghost: string;
                    link: string;
                };
                icon: {
                    base: string;
                    loading: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                    };
                };
                default: {
                    size: string;
                    variant: string;
                    color: string;
                    loadingIcon: string;
                };
            }> & {
                strategy?: Strategy;
            }>;
            default: () => {};
        };
        to: {
            readonly type: PropType<import("vue-router").RouteLocationRaw>;
            readonly default: any;
            readonly required: false;
        };
        href: {
            readonly type: PropType<import("vue-router").RouteLocationRaw>;
            readonly default: any;
            readonly required: false;
        };
        target: {
            readonly type: PropType<import("#app").NuxtLinkProps["target"]>;
            readonly default: any;
            readonly required: false;
        };
        rel: {
            readonly type: PropType<any>;
            readonly default: any;
            readonly required: false;
        };
        noRel: {
            readonly type: PropType<import("#app").NuxtLinkProps["noRel"]>;
            readonly default: any;
            readonly required: false;
        };
        prefetch: {
            readonly type: PropType<import("#app").NuxtLinkProps["prefetch"]>;
            readonly default: any;
            readonly required: false;
        };
        noPrefetch: {
            readonly type: PropType<import("#app").NuxtLinkProps["noPrefetch"]>;
            readonly default: any;
            readonly required: false;
        };
        activeClass: {
            readonly type: PropType<import("#app").NuxtLinkProps["activeClass"]>;
            readonly default: any;
            readonly required: false;
        };
        exactActiveClass: {
            readonly type: PropType<import("#app").NuxtLinkProps["exactActiveClass"]>;
            readonly default: any;
            readonly required: false;
        };
        prefetchedClass: {
            readonly type: PropType<import("#app").NuxtLinkProps["prefetchedClass"]>;
            readonly default: any;
            readonly required: false;
        };
        replace: {
            readonly type: PropType<import("#app").NuxtLinkProps["replace"]>;
            readonly default: any;
            readonly required: false;
        };
        ariaCurrentValue: {
            readonly type: PropType<import("#app").NuxtLinkProps["ariaCurrentValue"]>;
            readonly default: any;
            readonly required: false;
        };
        external: {
            readonly type: PropType<import("#app").NuxtLinkProps["external"]>;
            readonly default: any;
            readonly required: false;
        };
    }>> & Readonly<{}>, {
        type: string;
        size: import("../../types/button.js").ButtonSize;
        ui: {
            base?: string;
            font?: string;
            rounded?: string;
            truncate?: string;
            block?: string;
            inline?: string;
            size?: DeepPartial<{
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            }, any>;
            gap?: DeepPartial<{
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            }, any>;
            padding?: DeepPartial<{
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            }, any>;
            square?: DeepPartial<{
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            }, any>;
            color?: DeepPartial<{
                white: {
                    solid: string;
                    ghost: string;
                };
                gray: {
                    solid: string;
                    ghost: string;
                    link: string;
                };
                black: {
                    solid: string;
                    link: string;
                };
            }, any>;
            variant?: DeepPartial<{
                solid: string;
                outline: string;
                soft: string;
                ghost: string;
                link: string;
            }, any>;
            icon?: DeepPartial<{
                base: string;
                loading: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
            }, any>;
            default?: DeepPartial<{
                size: string;
                variant: string;
                color: string;
                loadingIcon: string;
            }, any>;
        } & {
            [key: string]: any;
        } & {
            strategy?: Strategy;
        };
        color: import("../../types/button.js").ButtonColor;
        variant: import("../../types/button.js").ButtonVariant;
        truncate: boolean;
        target: "_blank" | "_parent" | "_self" | "_top" | (string & {});
        to: string | import("vue-router").RouteLocationAsRelativeGeneric | import("vue-router").RouteLocationAsPathGeneric;
        activeClass: string;
        exactActiveClass: string;
        ariaCurrentValue: "page" | "step" | "location" | "date" | "time" | "true" | "false";
        replace: boolean;
        noRel: boolean;
        prefetch: boolean;
        noPrefetch: boolean;
        prefetchedClass: string;
        external: boolean;
        leading: boolean;
        disabled: boolean;
        href: string | import("vue-router").RouteLocationAsRelativeGeneric | import("vue-router").RouteLocationAsPathGeneric;
        rel: any;
        icon: string;
        class: any;
        block: boolean;
        square: boolean;
        label: string;
        loading: boolean;
        padded: boolean;
        loadingIcon: string;
        leadingIcon: string;
        trailingIcon: string;
        trailing: boolean;
    }, {}, {
        UIcon: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                required: true;
            };
            mode: {
                type: PropType<"svg" | "css">;
                required: false;
                default: any;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: any;
            };
            customize: {
                type: FunctionConstructor;
                required: false;
                default: any;
            };
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                required: true;
            };
            mode: {
                type: PropType<"svg" | "css">;
                required: false;
                default: any;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: any;
            };
            customize: {
                type: FunctionConstructor;
                required: false;
                default: any;
            };
        }>> & Readonly<{}>, {
            mode: "svg" | "css";
            size: string | number;
            customize: Function;
        }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        ULink: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
            as: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            active: {
                type: BooleanConstructor;
                default: any;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactQuery: {
                type: PropType<boolean | "partial">;
                default: boolean;
            };
            exactHash: {
                type: BooleanConstructor;
                default: boolean;
            };
            inactiveClass: {
                type: StringConstructor;
                default: any;
            };
            to: {
                readonly type: PropType<import("vue-router").RouteLocationRaw>;
                readonly default: any;
                readonly required: false;
            };
            href: {
                readonly type: PropType<import("vue-router").RouteLocationRaw>;
                readonly default: any;
                readonly required: false;
            };
            target: {
                readonly type: PropType<import("#app").NuxtLinkProps["target"]>;
                readonly default: any;
                readonly required: false;
            };
            rel: {
                readonly type: PropType<any>;
                readonly default: any;
                readonly required: false;
            };
            noRel: {
                readonly type: PropType<import("#app").NuxtLinkProps["noRel"]>;
                readonly default: any;
                readonly required: false;
            };
            prefetch: {
                readonly type: PropType<import("#app").NuxtLinkProps["prefetch"]>;
                readonly default: any;
                readonly required: false;
            };
            noPrefetch: {
                readonly type: PropType<import("#app").NuxtLinkProps["noPrefetch"]>;
                readonly default: any;
                readonly required: false;
            };
            activeClass: {
                readonly type: PropType<import("#app").NuxtLinkProps["activeClass"]>;
                readonly default: any;
                readonly required: false;
            };
            exactActiveClass: {
                readonly type: PropType<import("#app").NuxtLinkProps["exactActiveClass"]>;
                readonly default: any;
                readonly required: false;
            };
            prefetchedClass: {
                readonly type: PropType<import("#app").NuxtLinkProps["prefetchedClass"]>;
                readonly default: any;
                readonly required: false;
            };
            replace: {
                readonly type: PropType<import("#app").NuxtLinkProps["replace"]>;
                readonly default: any;
                readonly required: false;
            };
            ariaCurrentValue: {
                readonly type: PropType<import("#app").NuxtLinkProps["ariaCurrentValue"]>;
                readonly default: any;
                readonly required: false;
            };
            external: {
                readonly type: PropType<import("#app").NuxtLinkProps["external"]>;
                readonly default: any;
                readonly required: false;
            };
        }>, {
            resolveLinkClass: (route: any, $route: any, { isActive, isExactActive }: {
                isActive: boolean;
                isExactActive: boolean;
            }) => string;
        }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
            as: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            active: {
                type: BooleanConstructor;
                default: any;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            exactQuery: {
                type: PropType<boolean | "partial">;
                default: boolean;
            };
            exactHash: {
                type: BooleanConstructor;
                default: boolean;
            };
            inactiveClass: {
                type: StringConstructor;
                default: any;
            };
            to: {
                readonly type: PropType<import("vue-router").RouteLocationRaw>;
                readonly default: any;
                readonly required: false;
            };
            href: {
                readonly type: PropType<import("vue-router").RouteLocationRaw>;
                readonly default: any;
                readonly required: false;
            };
            target: {
                readonly type: PropType<import("#app").NuxtLinkProps["target"]>;
                readonly default: any;
                readonly required: false;
            };
            rel: {
                readonly type: PropType<any>;
                readonly default: any;
                readonly required: false;
            };
            noRel: {
                readonly type: PropType<import("#app").NuxtLinkProps["noRel"]>;
                readonly default: any;
                readonly required: false;
            };
            prefetch: {
                readonly type: PropType<import("#app").NuxtLinkProps["prefetch"]>;
                readonly default: any;
                readonly required: false;
            };
            noPrefetch: {
                readonly type: PropType<import("#app").NuxtLinkProps["noPrefetch"]>;
                readonly default: any;
                readonly required: false;
            };
            activeClass: {
                readonly type: PropType<import("#app").NuxtLinkProps["activeClass"]>;
                readonly default: any;
                readonly required: false;
            };
            exactActiveClass: {
                readonly type: PropType<import("#app").NuxtLinkProps["exactActiveClass"]>;
                readonly default: any;
                readonly required: false;
            };
            prefetchedClass: {
                readonly type: PropType<import("#app").NuxtLinkProps["prefetchedClass"]>;
                readonly default: any;
                readonly required: false;
            };
            replace: {
                readonly type: PropType<import("#app").NuxtLinkProps["replace"]>;
                readonly default: any;
                readonly required: false;
            };
            ariaCurrentValue: {
                readonly type: PropType<import("#app").NuxtLinkProps["ariaCurrentValue"]>;
                readonly default: any;
                readonly required: false;
            };
            external: {
                readonly type: PropType<import("#app").NuxtLinkProps["external"]>;
                readonly default: any;
                readonly required: false;
            };
        }>> & Readonly<{}>, {
            type: string;
            target: "_blank" | "_parent" | "_self" | "_top" | (string & {});
            to: string | import("vue-router").RouteLocationAsRelativeGeneric | import("vue-router").RouteLocationAsPathGeneric;
            activeClass: string;
            exactActiveClass: string;
            ariaCurrentValue: "page" | "step" | "location" | "date" | "time" | "true" | "false";
            replace: boolean;
            noRel: boolean;
            prefetch: boolean;
            noPrefetch: boolean;
            prefetchedClass: string;
            external: boolean;
            as: string;
            disabled: boolean;
            active: boolean;
            exact: boolean;
            exactQuery: boolean | "partial";
            exactHash: boolean;
            inactiveClass: string;
            href: string | import("vue-router").RouteLocationAsRelativeGeneric | import("vue-router").RouteLocationAsPathGeneric;
            rel: any;
        }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    }, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    UProgress: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        value: {
            type: NumberConstructor;
            default: any;
        };
        max: {
            type: (NumberConstructor | {
                (arrayLength: number): any[];
                (...items: any[]): any[];
                new (arrayLength: number): any[];
                new (...items: any[]): any[];
                isArray(arg: any): arg is any[];
                readonly prototype: any[];
                from<T>(arrayLike: ArrayLike<T>): T[];
                from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
                from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];
                from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
                of<T>(...items: T[]): T[];
                fromAsync<T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>;
                fromAsync<T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>;
                readonly [Symbol.species]: ArrayConstructor;
            })[];
            default: number;
        };
        indicator: {
            type: BooleanConstructor;
            default: boolean;
        };
        animation: {
            type: PropType<ProgressAnimation>;
            default: () => string;
            validator(value: string): boolean;
        };
        size: {
            type: PropType<import("../../types/progress.js").ProgressSize>;
            default: () => string;
            validator(value: string): boolean;
        };
        color: {
            type: PropType<ProgressColor>;
            default: () => string;
            validator(value: string): any;
        };
        class: {
            type: PropType<any>;
            default: () => "";
        };
        ui: {
            type: PropType<DeepPartial<{
                wrapper: string;
                indicator: {
                    container: {
                        base: string;
                        width: string;
                        transition: string;
                    };
                    align: string;
                    width: string;
                    color: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                        '2xl': string;
                    };
                };
                progress: {
                    base: string;
                    width: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                        '2xl': string;
                    };
                    rounded: string;
                    track: string;
                    bar: string;
                    color: string;
                    background: string;
                    indeterminate: {
                        base: string;
                        rounded: string;
                    };
                };
                steps: {
                    base: string;
                    color: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                        '2xl': string;
                    };
                };
                step: {
                    base: string;
                    align: string;
                    active: string;
                    first: string;
                };
                animation: {
                    carousel: string;
                    'carousel-inverse': string;
                    swing: string;
                    elastic: string;
                };
                default: {
                    color: string;
                    size: string;
                    animation: string;
                };
            }> & {
                strategy?: Strategy;
            }>;
            default: () => {};
        };
    }>, {
        ui: import("vue").ComputedRef<{
            wrapper: string;
            indicator: {
                container: {
                    base: string;
                    width: string;
                    transition: string;
                };
                align: string;
                width: string;
                color: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                    '2xl': string;
                };
            };
            progress: {
                base: string;
                width: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                    '2xl': string;
                };
                rounded: string;
                track: string;
                bar: string;
                color: string;
                background: string;
                indeterminate: {
                    base: string;
                    rounded: string;
                };
            };
            steps: {
                base: string;
                color: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                    '2xl': string;
                };
            };
            step: {
                base: string;
                align: string;
                active: string;
                first: string;
            };
            animation: {
                carousel: string;
                'carousel-inverse': string;
                swing: string;
                elastic: string;
            };
            default: {
                color: string;
                size: string;
                animation: string;
            };
        }>;
        attrs: import("vue").ComputedRef<Pick<{
            [x: string]: unknown;
        }, string>>;
        indicatorContainerClass: import("vue").ComputedRef<string>;
        indicatorClass: import("vue").ComputedRef<string>;
        progressClass: import("vue").ComputedRef<string>;
        stepsClass: import("vue").ComputedRef<string>;
        stepClasses: (index: string | number) => string;
        isIndeterminate: import("vue").ComputedRef<boolean>;
        isSteps: import("vue").ComputedRef<boolean>;
        realMax: import("vue").ComputedRef<number>;
        percent: import("vue").ComputedRef<number>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: NumberConstructor;
            default: any;
        };
        max: {
            type: (NumberConstructor | {
                (arrayLength: number): any[];
                (...items: any[]): any[];
                new (arrayLength: number): any[];
                new (...items: any[]): any[];
                isArray(arg: any): arg is any[];
                readonly prototype: any[];
                from<T>(arrayLike: ArrayLike<T>): T[];
                from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
                from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];
                from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
                of<T>(...items: T[]): T[];
                fromAsync<T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>;
                fromAsync<T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>;
                readonly [Symbol.species]: ArrayConstructor;
            })[];
            default: number;
        };
        indicator: {
            type: BooleanConstructor;
            default: boolean;
        };
        animation: {
            type: PropType<ProgressAnimation>;
            default: () => string;
            validator(value: string): boolean;
        };
        size: {
            type: PropType<import("../../types/progress.js").ProgressSize>;
            default: () => string;
            validator(value: string): boolean;
        };
        color: {
            type: PropType<ProgressColor>;
            default: () => string;
            validator(value: string): any;
        };
        class: {
            type: PropType<any>;
            default: () => "";
        };
        ui: {
            type: PropType<DeepPartial<{
                wrapper: string;
                indicator: {
                    container: {
                        base: string;
                        width: string;
                        transition: string;
                    };
                    align: string;
                    width: string;
                    color: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                        '2xl': string;
                    };
                };
                progress: {
                    base: string;
                    width: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                        '2xl': string;
                    };
                    rounded: string;
                    track: string;
                    bar: string;
                    color: string;
                    background: string;
                    indeterminate: {
                        base: string;
                        rounded: string;
                    };
                };
                steps: {
                    base: string;
                    color: string;
                    size: {
                        '2xs': string;
                        xs: string;
                        sm: string;
                        md: string;
                        lg: string;
                        xl: string;
                        '2xl': string;
                    };
                };
                step: {
                    base: string;
                    align: string;
                    active: string;
                    first: string;
                };
                animation: {
                    carousel: string;
                    'carousel-inverse': string;
                    swing: string;
                    elastic: string;
                };
                default: {
                    color: string;
                    size: string;
                    animation: string;
                };
            }> & {
                strategy?: Strategy;
            }>;
            default: () => {};
        };
    }>> & Readonly<{}>, {
        size: "sm" | "xs" | "2xs" | "md" | "lg" | "xl" | "2xl";
        ui: {
            wrapper?: string;
            indicator?: DeepPartial<{
                container: {
                    base: string;
                    width: string;
                    transition: string;
                };
                align: string;
                width: string;
                color: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                    '2xl': string;
                };
            }, any>;
            progress?: DeepPartial<{
                base: string;
                width: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                    '2xl': string;
                };
                rounded: string;
                track: string;
                bar: string;
                color: string;
                background: string;
                indeterminate: {
                    base: string;
                    rounded: string;
                };
            }, any>;
            steps?: DeepPartial<{
                base: string;
                color: string;
                size: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                    '2xl': string;
                };
            }, any>;
            step?: DeepPartial<{
                base: string;
                align: string;
                active: string;
                first: string;
            }, any>;
            animation?: DeepPartial<{
                carousel: string;
                'carousel-inverse': string;
                swing: string;
                elastic: string;
            }, any>;
            default?: DeepPartial<{
                color: string;
                size: string;
                animation: string;
            }, any>;
        } & {
            [key: string]: any;
        } & {
            strategy?: Strategy;
        };
        color: "primary" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose";
        class: any;
        value: number;
        indicator: boolean;
        animation: "carousel" | "carousel-inverse" | "swing" | "elastic";
        max: number | any[];
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    UCheckbox: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: () => any;
        };
        value: {
            type: (StringConstructor | NumberConstructor | BooleanConstructor | ObjectConstructor)[];
            default: any;
        };
        modelValue: {
            type: PropType<boolean | Array<any> | null>;
            default: any;
        };
        name: {
            type: StringConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: any;
        };
        help: {
            type: StringConstructor;
            default: any;
        };
        label: {
            type: StringConstructor;
            default: any;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: PropType<"primary" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose">;
            default: () => string;
            validator(value: string): any;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        class: {
            type: PropType<any>;
            default: () => "";
        };
        ui: {
            type: PropType<DeepPartial<{
                wrapper: string;
                container: string;
                base: string;
                form: string;
                rounded: string;
                color: string;
                background: string;
                border: string;
                ring: string;
                inner: string;
                label: string;
                required: string;
                help: string;
                default: {
                    color: string;
                };
            }> & {
                strategy?: Strategy;
            }>;
            default: () => {};
        };
    }>, {
        ui: import("vue").ComputedRef<{
            wrapper: string;
            container: string;
            base: string;
            form: string;
            rounded: string;
            color: string;
            background: string;
            border: string;
            ring: string;
            inner: string;
            label: string;
            required: string;
            help: string;
            default: {
                color: string;
            };
        }>;
        attrs: import("vue").ComputedRef<Pick<{
            [x: string]: unknown;
        }, string>>;
        toggle: import("vue").WritableComputedRef<boolean | any[], boolean | any[]>;
        inputId: string;
        name: import("vue").ComputedRef<string>;
        inputClass: import("vue").ComputedRef<string>;
        onChange: (event: Event) => void;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: () => any;
        };
        value: {
            type: (StringConstructor | NumberConstructor | BooleanConstructor | ObjectConstructor)[];
            default: any;
        };
        modelValue: {
            type: PropType<boolean | Array<any> | null>;
            default: any;
        };
        name: {
            type: StringConstructor;
            default: any;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: any;
        };
        help: {
            type: StringConstructor;
            default: any;
        };
        label: {
            type: StringConstructor;
            default: any;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: PropType<"primary" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose">;
            default: () => string;
            validator(value: string): any;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        class: {
            type: PropType<any>;
            default: () => "";
        };
        ui: {
            type: PropType<DeepPartial<{
                wrapper: string;
                container: string;
                base: string;
                form: string;
                rounded: string;
                color: string;
                background: string;
                border: string;
                ring: string;
                inner: string;
                label: string;
                required: string;
                help: string;
                default: {
                    color: string;
                };
            }> & {
                strategy?: Strategy;
            }>;
            default: () => {};
        };
    }>> & Readonly<{
        onChange?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }>, {
        name: string;
        required: boolean;
        ui: {
            wrapper?: string;
            container?: string;
            base?: string;
            form?: string;
            rounded?: string;
            color?: string;
            background?: string;
            border?: string;
            ring?: string;
            inner?: string;
            label?: string;
            required?: string;
            help?: string;
            default?: DeepPartial<{
                color: string;
            }, any>;
        } & {
            [key: string]: any;
        } & {
            strategy?: Strategy;
        };
        color: "primary" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose";
        disabled: boolean;
        id: string;
        class: any;
        modelValue: boolean | any[];
        value: string | number | boolean | Record<string, any>;
        label: string;
        help: string;
        indeterminate: boolean;
        inputClass: string;
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
